name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort

    - name: Check formatting
      run: |
        black --check .
        isort --check-only .
        flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      qdrant:
        image: qdrant/qdrant
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        pytest tests/ --cov=./ --cov-report=xml -v
        
    - name: Run integration tests
      if: github.event_name == 'push'
      env:
        AIRWEAVE_CLOUD_TOKEN: ${{ secrets.AIRWEAVE_CLOUD_TOKEN }}
        SAP_BASE_URL: ${{ secrets.SAP_BASE_URL }}
        SAP_CLIENT_ID: ${{ secrets.SAP_CLIENT_ID }}
        SAP_CLIENT_SECRET: ${{ secrets.SAP_CLIENT_SECRET }}
      run: |
        pytest tests/ --runintegration -v
        
    - name: Run Airweave smoke test
      env:
        AIRWEAVE_CLOUD_TOKEN: ${{ secrets.AIRWEAVE_CLOUD_TOKEN }}
      run: |
        python -c "
        from airweave import Client
        import os
        
        # Initialize client
        client = Client(os.getenv('AIRWEAVE_CLOUD_TOKEN'))
        
        # Create test collection
        client.create_collection('test')
        
        # Add test document
        client.add_document(
            collection='test',
            content='Hello World',
            metadata={'type': 'test'}
        )
        
        # Search and verify
        results = client.search(
            collection='test',
            query='hello world',
            limit=1
        )
        assert len(results) == 1
        assert 'Hello World' in results[0].content
        
        # Cleanup
        client.delete_collection('test')
        "

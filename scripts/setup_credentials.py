"""
Helper script to set up OAuth2 credentials for Gmail and GDrive testing.
This script should NEVER be committed to version control.

Usage:
    python setup_credentials.py

This will:
1. Guide you through OAuth2 setup in Google Cloud Console
2. Help you authorize the application
3. Save credentials securely to .env file
"""
import os
import json
import secrets
from pathlib import Path
from google_auth_oauthlib.flow import InstalledAppFlow
from google.oauth2.credentials import Credentials

# Define required OAuth scopes
SCOPES = [
    'https://www.googleapis.com/auth/gmail.readonly',
    'https://www.googleapis.com/auth/drive.readonly'
]

def create_env_file(creds: Credentials, folder_id: str, email: str):
    """
    Safely create .env file with credentials.
    Never prints or logs credential values.
    """
    env_path = Path('.env')
    
    # Generate random key for extra security
    admin_pass = secrets.token_urlsafe(16)
    
    env_content = f"""# WARNING: This file contains sensitive credentials
# Never commit this file to version control
# Generated by setup_credentials.py

# Admin credentials
AIRWEAVE_ADMIN_USER=admin
AIRWEAVE_ADMIN_PASS={admin_pass}

# Google OAuth2 credentials
GOOGLE_CLIENT_ID={creds.client_id}
GOOGLE_CLIENT_SECRET={creds.client_secret}
GOOGLE_REFRESH_TOKEN={creds.refresh_token}

# Test configuration
TEST_EMAIL={email}
TEST_FOLDER_ID={folder_id}
GMAIL_TEST=1
GDRIVE_TEST=1

# Logging
LOG_LEVEL=INFO
"""
    
    # Write with restricted permissions
    env_path.write_text(env_content)
    os.chmod(env_path, 0o600)  # Read/write for owner only
    
    print("\nCredentials saved securely to .env file")
    print("File permissions set to 600 (owner read/write only)")
    print("\nNEVER commit the .env file to version control!")

def main():
    print("Google OAuth2 Credential Setup")
    print("=============================")
    print("\n1. Go to https://console.cloud.google.com/")
    print("2. Create a project or select existing project")
    print("3. Enable Gmail API and Drive API")
    print("4. Create OAuth2 credentials (Desktop Application type)")
    print("5. Download the credentials JSON file")
    
    # Get credentials file path
    while True:
        creds_path = input("\nEnter path to credentials JSON file: ").strip()
        if os.path.exists(creds_path):
            break
        print("File not found, please try again")
    
    # Get test folder ID
    folder_id = input("\nEnter Google Drive folder ID for testing: ").strip()
    
    # Initialize OAuth2 flow
    flow = InstalledAppFlow.from_client_secrets_file(creds_path, SCOPES)
    creds = flow.run_local_server(port=0)
    
    # Get user email
    email = input("\nEnter Gmail address to use for testing: ").strip()
    
    # Save credentials
    create_env_file(creds, folder_id, email)
    
    # Cleanup
    try:
        os.remove(creds_path)
        print(f"\nDeleted credentials JSON file: {creds_path}")
    except:
        print(f"\nWARNING: Please manually delete credentials file: {creds_path}")

if __name__ == '__main__':
    main()
